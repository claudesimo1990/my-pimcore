worker_processes 1;
user www-data www-data;
events {
  worker_connections 1024;
}

http {
  # Hide nginx version information.
  server_tokens off;
  # Define the MIME types for files.
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;
  # Update charset_types due to updated mime.types
  charset_types text/xml text/plain text/vnd.wap.wml application/x-javascript application/rss+xml text/css application/javascript application/json;
  # Format to use in log files
  log_format  main  '$http_x_forwarded_for - $remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent"';
  # How long to allow each connection to stay idle; longer values are better
  # for each individual client, particularly for SSL, but means that worker
  # connections are tied up longer. (Default: 65)
  keepalive_timeout 600;
  # Speed up file transfers by using sendfile() to copy directly
  # between descriptors rather than using read()/write().
  sendfile        on;
  # Tell Nginx not to send out partial frames; this increases throughput
  # since TCP frames are filled up before being sent out. (adds TCP_CORK)
  tcp_nopush      on;
  # Tell Nginx to enable the Nagle buffering algorithm for TCP packets, which
  # collates several smaller packets together into one larger packet, thus saving
  # bandwidth at the cost of a nearly imperceptible increase to latency. (removes TCP_NODELAY)
  tcp_nodelay     off;
  # Compression
  # Enable Gzip compressed.
  gzip on;
  # Enable compression both for HTTP/1.0 and HTTP/1.1 (required for CloudFront).
  gzip_http_version  1.0;
  # Compression level (1-9).
  # 5 is a perfect compromise between size and cpu usage, offering about
  # 75% reduction for most ascii files (almost identical to level 9).
  gzip_comp_level    5;
  # Don't compress anything that's already small and unlikely to shrink much
  # if at all (the default is 20 bytes, which is bad as that usually leads to
  # larger files after gzipping).
  gzip_min_length    256;
  # Compress data even for clients that are connecting to us via proxies,
  # identified by the "Via" header (required for CloudFront).
  gzip_proxied       any;
  # Tell proxies to cache both the gzipped and regular version of a resource
  # whenever the client's Accept-Encoding capabilities header varies;
  # Avoids the issue where a non-gzip capable client (which is extremely rare
  # today) would display gibberish if their proxy gave them the gzipped version.
  gzip_vary          on;
  # Compress all output labeled with one of the following MIME-types.
  gzip_types
    application/atom+xml
    application/javascript
    application/json
    application/rss+xml
    application/vnd.ms-fontobject
    application/x-font-ttf
    application/x-web-app-manifest+json
    application/xhtml+xml
    application/xml
    font/opentype
    image/svg+xml
    image/x-icon
    image/png
    image/gif
    image/jpeg
    image/jpg
    text/javascript
    text/css
    text/plain
    text/x-component;

    server {
        listen 80;
        server_name pimcore.agentur-sg.com;
        root /var/www/html/public;
        index index.php;

        client_max_body_size 1024M;

        access_log  /var/log/access.log;
        error_log   /var/log/error.log error;

        # Pimcore Head-Link Cache-Busting
        rewrite ^/cache-buster-(?:\d+)/(.*) /$1 last;

        # Stay secure
        #
        # a) don't allow PHP in folders allowing file uploads
        location ~* /var/assets/.*\.php(/|$) {
            return 404;
        }
        # b) Prevent clients from accessing hidden files (starting with a dot)
        # Access to `/.well-known/` is allowed.
        # https://www.mnot.net/blog/2010/04/07/well-known
        # https://tools.ietf.org/html/rfc5785
        location ~* /\.(?!well-known/) {
            deny all;
            log_not_found off;
            access_log off;
        }
        # c) Prevent clients from accessing to backup/config/source files
        location ~* (?:\.(?:bak|conf(ig)?|dist|fla|in[ci]|log|psd|sh|sql|sw[op])|~)$ {
            deny all;
        }

        # Some Admin Modules need this:
        # Database Admin, Server Info
        location ~* ^/admin/(adminer|external|coreshop) {
            rewrite .* /index.php$is_args$args last;
        }

        # Thumbnails
        location ~* .*/(image|video)-thumb__\d+__.* {
            try_files /var/tmp/$1-thumbnails$uri /index.php;
            expires 1y;
            access_log off;
            add_header Cache-Control "public";
        }

        # Assets
        # Still use a whitelist approach to prevent each and every missing asset to go through the PHP Engine.
        location ~* ^(?!/admin/asset/webdav/|/download/)(.+?)\.((?:css|js)(?:\.map)?|jpe?g|gif|png|svgz?|eps|exe|gz|zip|mp\d|ogg|ogv|webm|pdf|docx?|xlsx?|pptx?)$ {
            try_files /var/assets$uri $uri =404;
            expires 1y;
            access_log off;
            log_not_found off;
            add_header Cache-Control "public";
        }

        # Fonts
        location ~* ^(/build/fonts/)(.+?)\.(woff2|woff|ttf|eot)$ {
            try_files /build/fonts$uri $uri =404;
            expires 1y;
            access_log off;
            log_not_found off;
            add_header Cache-Control "public";
        }

        # Translation Files f√ºr Vue
        location ~* /translations/.*.(json)$ {
            try_files $uri =404;
        }

        location / {
            rewrite ^/$ https://corona.abus-kransysteme.de/informationen redirect;
        }

        location ~* ^/download {
            error_page 404 /meta/404;
            add_header "X-UA-Compatible" "IE=edge";
            try_files $uri /index.php$is_args$args;

            auth_basic "Bitte melden Sie sich an";
            auth_basic_user_file /etc/nginx/.coronapasswd;
        }

        location ~* ^/informationen/coronatestappointment/(administration|booking) {
            error_page 404 /meta/404;
            add_header "X-UA-Compatible" "IE=edge";
            try_files $uri /index.php$is_args$args;

            auth_basic "Bitte melden Sie sich an";
            auth_basic_user_file /etc/nginx/.coronaadminpasswd;
        }

        location ~* ^/informationen {
            error_page 404 /meta/404;
            add_header "X-UA-Compatible" "IE=edge";
            try_files $uri /index.php$is_args$args;

            auth_basic "Bitte melden Sie sich an";
            auth_basic_user_file /etc/nginx/.coronapasswd;
        }


        # Use this location when the installer has to be run
        # location ~ /(app|install)\.php(/|$) {
        #
        # Use this after initial install is done:
        location ~ ^/index\.php(/|$) {
            send_timeout 1800;
            fastcgi_read_timeout 1800;
            # regex to split $uri to $fastcgi_script_name and $fastcgi_path
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            # Check that the PHP script exists before passing it
            try_files $fastcgi_script_name =404;
            include fastcgi_params;
            # Bypass the fact that try_files resets $fastcgi_path_info
            # see: http://trac.nginx.org/nginx/ticket/321
            set $path_info $fastcgi_path_info;
            fastcgi_param PATH_INFO $path_info;

            # Activate these, if using Symlinks and opcache
            fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
            fastcgi_param DOCUMENT_ROOT $realpath_root;

            fastcgi_pass claude_pimcore_php-fpm:9000;
            # Prevents URIs that include the front controller. This will 404:
            # http://domain.tld/app.php/some-path
            # Remove the internal directive to allow URIs like this
            internal;
        }

        # PHP-FPM Status and Ping
        location /fpm- {
            access_log off;
            include fastcgi_params;
            location /fpm-status {
                allow 127.0.0.1;
                # add additional IP's or Ranges
                deny all;
                fastcgi_pass claude_pimcore_php-fpm:9000;
            }
            location /fpm-ping {
                fastcgi_pass claude_pimcore_php-fpm:9000;
            }
        }
        # nginx Status
        # see: https://nginx.org/en/docs/http/ngx_http_stub_status_module.html
        location /nginx-status {
            allow 127.0.0.1;
            deny all;
            access_log off;
            stub_status;
        }
    }

    server {
        listen 80;
        server_name sg.development.claude;
        root /var/www/html/public;
        index index.php;

        client_max_body_size 1024M;

        access_log  /var/log/access.log;
        error_log   /var/log/error.log error;

        # Pimcore Head-Link Cache-Busting
        rewrite ^/cache-buster-(?:\d+)/(.*) /$1 last;

        # Stay secure
        #
        # a) don't allow PHP in folders allowing file uploads
        location ~* /var/assets/.*\.php(/|$) {
            return 404;
        }
        # b) Prevent clients from accessing hidden files (starting with a dot)
        # Access to `/.well-known/` is allowed.
        # https://www.mnot.net/blog/2010/04/07/well-known
        # https://tools.ietf.org/html/rfc5785
        location ~* /\.(?!well-known/) {
            deny all;
            log_not_found off;
            access_log off;
        }
        # c) Prevent clients from accessing to backup/config/source files
        location ~* (?:\.(?:bak|conf(ig)?|dist|fla|in[ci]|log|psd|sh|sql|sw[op])|~)$ {
            deny all;
        }

        # Some Admin Modules need this:
        # Database Admin, Server Info
        location ~* ^/admin/(adminer|external|coreshop) {
            rewrite .* /index.php$is_args$args last;
        }

        # Thumbnails
        location ~* .*/(image|video)-thumb__\d+__.* {
            try_files /var/tmp/$1-thumbnails$uri /index.php;
            expires 2w;
            access_log off;
            add_header Cache-Control "public";
        }

        # Assets
        # Still use a whitelist approach to prevent each and every missing asset to go through the PHP Engine.
        location ~* ^(?!/admin/asset/webdav/|/download/)(.+?)\.((?:css|js)(?:\.map)?|jpe?g|gif|png|svgz?|eps|exe|gz|zip|mp\d|ogg|ogv|webm|pdf|docx?|xlsx?|pptx?)$ {
            try_files /var/assets$uri $uri =404;
            expires 2w;
            access_log off;
            log_not_found off;
            add_header Cache-Control "public";
        }

        # Translation Files f√ºr Vue
        location ~* /translations/.*.(json)$ {
            try_files $uri =404;
        }

        location / {
            error_page 404 /meta/404;
            add_header "X-UA-Compatible" "IE=edge";
            try_files $uri /index.php$is_args$args;

	    auth_basic "For development purpose only";
	    auth_basic_user_file /etc/nginx/.htpasswd;
        }

        # Use this location when the installer has to be run
        # location ~ /(app|install)\.php(/|$) {
        #
        # Use this after initial install is done:
        location ~ ^/index\.php(/|$) {
            send_timeout 1800;
            fastcgi_read_timeout 1800;
            # regex to split $uri to $fastcgi_script_name and $fastcgi_path
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            # Check that the PHP script exists before passing it
            try_files $fastcgi_script_name =404;
            include fastcgi_params;
            # Bypass the fact that try_files resets $fastcgi_path_info
            # see: http://trac.nginx.org/nginx/ticket/321
            set $path_info $fastcgi_path_info;
            fastcgi_param PATH_INFO $path_info;

            # Activate these, if using Symlinks and opcache
            fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
            fastcgi_param DOCUMENT_ROOT $realpath_root;

            fastcgi_pass claude_pimcore_php-fpm:9000;
            # Prevents URIs that include the front controller. This will 404:
            # http://domain.tld/app.php/some-path
            # Remove the internal directive to allow URIs like this
            internal;
        }

        # PHP-FPM Status and Ping
        location /fpm- {
            access_log off;
            include fastcgi_params;
            location /fpm-status {
                allow 127.0.0.1;
                # add additional IP's or Ranges
                deny all;
                fastcgi_pass claude_pimcore_php-fpm:9000;
            }
            location /fpm-ping {
                fastcgi_pass claude_pimcore_php-fpm:9000;
            }
        }
        # nginx Status
        # see: https://nginx.org/en/docs/http/ngx_http_stub_status_module.html
        location /nginx-status {
            allow 127.0.0.1;
            deny all;
            access_log off;
            stub_status;
        }
    }

    server {
        listen 443;
        server_name pimcore.agentur-sg.com;

        root /var/www/html/public;
    }
}
